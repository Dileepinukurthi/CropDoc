# -*- coding: utf-8 -*-
"""Quantification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZQzF1IYy6war0UE2cqXlbP6hcWSJ6u4I
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
from IPython.display import Image

img_path=input().strip()
img = cv2.imread(img_path)
img = cv2.resize(img, (250, 250))
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
range1 = (26, 0, 0)
range2 = (86, 255, 255)
mask1 = cv2.inRange(hsv, range1, range2)
# Applying morphological operations
kernel1 = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
mask2 = cv2.morphologyEx(mask1, cv2.MORPH_OPEN, kernel1)
mask2 = cv2.morphologyEx(mask1, cv2.MORPH_CLOSE, kernel1)
res = cv2.bitwise_and(img, img, mask=mask2)
range1, range2 = (38, 0, 0), (86, 255, 255)
mask = cv2.inRange(hsv, range1, range2)
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (7, 7))
mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
t = mask
mask = cv2.merge([mask, mask, mask])
mask_inv = 255 - mask
white = np.full_like(img, (255, 255, 255))
img_masked = cv2.bitwise_and(img, mask)
white_masked = cv2.bitwise_and(white, mask_inv)
result = cv2.add(img_masked, mask_inv)
x = cv2.countNonZero(t)
y = cv2.countNonZero(mask2)
print("severity of disease is {}%".format((1 - (x / y)) * 100))